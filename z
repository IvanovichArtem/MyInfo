class AlphaCalibrator:
    def __init__(self, migration_matrix, r_s_valid, target_matrices):
        """
        migration_matrix: базовая матрица (numpy array)
        r_s_valid: матрица, которая влияет на масштабирование α
        target_matrices: список матриц, для которых должно выполняться приближение:
            migration_matrix + (r_s_valid - 1) * α**(i+1) ≈ target_matrices[i]
        """
        self.migration_matrix = migration_matrix
        self.r_s_valid = r_s_valid
        self.target_matrices = target_matrices
        
        # Проверяем, что все матрицы имеют одинаковую размерность
        shape = migration_matrix.shape
        assert r_s_valid.shape == shape, "r_s_valid должна иметь ту же размерность, что и migration_matrix"
        for idx, m in enumerate(target_matrices):
            assert m.shape == shape, f"matrix[{idx}] имеет другую размерность"
        self.shape = shape

    def _residuals(self, alpha_flat):
        """
        Функция остатков, которую необходимо минимизировать.
        alpha_flat: одномерный вектор, который при reshape даёт матрицу α.
        Для каждого индекса i вычисляем:
          residual = (migration_matrix + (r_s_valid - 1) * α^(i+1)  - target_matrices[i])
        Все остатки объединяются в один вектор.
        """
        # Восстанавливаем матрицу α из векторного представления
        alpha = alpha_flat.reshape(self.shape)
        residuals = []
        for i, target in enumerate(self.target_matrices):
            # Возведение матрицы α в степень (i+1), используя np.linalg.matrix_power
            alpha_power = np.linalg.matrix_power(alpha, i + 1)
            # Моделируем приближение
            model_pred = self.migration_matrix + (self.r_s_valid - 1) * alpha_power
            # Остаток для текущей матрицы (разность поэлементно)
            res = (model_pred - target).ravel()
            residuals.append(res)
        return np.concatenate(residuals)

    def calibrate(self, alpha_init=None, bounds=None):
        """
        Запускаем оптимизацию, возвращаем оптимизированную матрицу α.
        alpha_init: начальное приближение для матрицы α (если None, инициализируем нулями)
        bounds: ограничения для элементов матрицы α в формате (lb, ub)
        """
        if alpha_init is None:
            alpha_init = np.ones(self.shape).ravel()  # можно менять, здесь начальное приближение = 1
        if bounds is None:
            bounds = (-np.inf, np.inf)

        # Запуск оптимизации методом наименьших квадратов
        res = least_squares(self._residuals, alpha_init, bounds=bounds)
        self.alpha_opt = res.x.reshape(self.shape)
        return self.alpha_opt
