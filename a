def evaluate_all_metrics(y_true, y_pred):
    """
    Вычисляет и выводит значения всех метрик для заданных реальных и предсказанных значений.
    """

    def clipped_error(y_true, y_pred, threshold=500):
        y_true, y_pred = np.array(y_true), np.array(y_pred)
        errors = np.abs((y_true - y_pred) / y_true) * 100
        return np.minimum(errors, threshold).mean()

    # Logarithmic Error
    def log_error(y_true, y_pred, epsilon=1e-8):
        y_true, y_pred = np.array(y_true), np.array(y_pred)
        return np.mean(np.abs(np.log(y_true + epsilon) - np.log(y_pred + epsilon)))

    # Weighted MAPE
    def wmape(y_true, y_pred):
        y_true, y_pred = np.array(y_true), np.array(y_pred)
        return np.sum(np.abs(y_true - y_pred)) / np.sum(y_true) * 100

    # Huber Loss
    def huber_loss(y_true, y_pred, delta=1.0):
        y_true, y_pred = np.array(y_true), np.array(y_pred)
        error = y_true - y_pred
        is_small_error = np.abs(error) <= delta
        squared_loss = 0.5 * error**2
        linear_loss = delta * (np.abs(error) - 0.5 * delta)
        return np.mean(np.where(is_small_error, squared_loss, linear_loss))

    # Modified sMAPE
    def modified_smape(y_true, y_pred, epsilon=1e-6):
        y_true, y_pred = np.array(y_true), np.array(y_pred)
        denominator = np.maximum(np.abs(y_true) + np.abs(y_pred), epsilon)
        return np.mean(np.abs(y_true - y_pred) / denominator) * 100

    print("=== Метрики ошибок ===")
    print(f"Clipped Error: {clipped_error(y_true, y_pred):.2f}%")
    print(f"Logarithmic Error: {log_error(y_true, y_pred):.4f}")
    print(f"WMAPE: {wmape(y_true, y_pred):.2f}%")
    print(f"Huber Loss: {huber_loss(y_true, y_pred):.4f}")
    print(f"Modified sMAPE: {modified_smape(y_true, y_pred):.2f}%")
