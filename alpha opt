Option Explicit

' Îñíîâíàÿ ïðîöåäóðà: ââîä äàííûõ, êîíâåðòàöèÿ â ÷èñëà, êàëèáðîâêà è çàïèñü ? ñ ó÷¸òîì ãðàíèö
Sub AlphaCalibration_Main()
    Dim nMatrices As Long
    Dim i As Long, j As Long, k As Long
    Dim rng As Range, rngMain As Range, rngOut As Range
    Dim tmpArr As Variant, mainArrRaw As Variant
    Dim mainD() As Double
    Dim matrices3D() As Double
    Dim alphaArr() As Double
    Dim r_s_valid As Double, lambda_reg As Double
    Dim delta As Double
    Dim lb As Double, ub As Double
    Dim lbInput As String, ubInput As String
    Dim nRows As Long, nCols As Long
    Dim s As String
    
    ' 1) Ââåäèòå êîëè÷åñòâî «âàëèäíûõ» ìàòðèö
    nMatrices = Application.InputBox( _
        prompt:="Ââåäèòå êîëè÷åñòâî âàëèäíûõ ìàòðèö:", _
        Title:="Êàëèáðîâêà ?", Type:=1)
    If nMatrices < 1 Then Exit Sub
    
    ' 2) Âûáåðèòå äèàïàçîí îñíîâíîé ìàòðèöû è êîíâåðòèðóéòå â ÷èñëà
    Set rngMain = Application.InputBox( _
        prompt:="Âûáåðèòå äèàïàçîí main_matrix:", _
        Title:="Êàëèáðîâêà ?", Type:=8)
    If rngMain Is Nothing Then Exit Sub
    rngMain.NumberFormat = "General": rngMain.Value = rngMain.Value
    mainArrRaw = rngMain.Value2
    
    nRows = UBound(mainArrRaw, 1)
    nCols = UBound(mainArrRaw, 2)
    ReDim mainD(1 To nRows, 1 To nCols)
    
    For i = 1 To nRows
        For j = 1 To nCols
            s = CStr(mainArrRaw(i, j))
            s = Replace(s, ",", ".")
            If IsNumeric(s) Then
                mainD(i, j) = CDbl(s)
            Else
                mainD(i, j) = Val(s)
            End If
        Next j
    Next i
    
    ' 3) Ïîäãîòîâêà 3D-ìàññèâà äëÿ «âàëèäíûõ» ìàòðèö
    ReDim matrices3D(1 To nMatrices, 1 To nRows, 1 To nCols)
    
    ' 4) Ñ÷èòûâàåì êàæäóþ «âàëèäíóþ» ìàòðèöó è êîíâåðòèðóåì â ÷èñëà
    For k = 1 To nMatrices
        Set rng = Application.InputBox( _
            prompt:="Âûáåðèòå äèàïàçîí âàëèäíîé ìàòðèöû ¹" & k & ":", _
            Title:="Êàëèáðîâêà ?", Type:=8)
        If rng Is Nothing Then Exit Sub
        
        rng.NumberFormat = "General": rng.Value = rng.Value
        tmpArr = rng.Value2
        
        If UBound(tmpArr, 1) <> nRows Or UBound(tmpArr, 2) <> nCols Then
            MsgBox "Ðàçìåð âàëèäíîé ìàòðèöû ¹" & k & " íå ñîâïàäàåò ñ main_matrix!", _
                   vbCritical, "Îøèáêà"
            Exit Sub
        End If
        
        For i = 1 To nRows
            For j = 1 To nCols
                s = CStr(tmpArr(i, j))
                s = Replace(s, ",", ".")
                If IsNumeric(s) Then
                    matrices3D(k, i, j) = CDbl(s)
                Else
                    matrices3D(k, i, j) = Val(s)
                End If
            Next j
        Next i
    Next k
    
    ' 5) Ââîä r_s_valid è ïàðàìåòðà ðåãóëÿðèçàöèè
    r_s_valid = Application.InputBox( _
        prompt:="Ââåäèòå çíà÷åíèå r_s_valid:", _
        Title:="Êàëèáðîâêà ?", Type:=1)
    delta = r_s_valid - 1
    lambda_reg = 0.01
    
    ' 6) Ââîä ãðàíèö ? êàê ñòðîê, çàòåì êîíâåðòàöèÿ
    lbInput = InputBox("Ââåäèòå íèæíþþ ãðàíèöó ? (ïî óìîë÷àíèþ ?0,2):", "Êàëèáðîâêà ?", "-0,2")
    s = Val(Replace(CStr(lbInput), ",", "."))
    If IsNumeric(s) Then
        lb = CDbl(s)
    Else
        MsgBox "Íåâåðíàÿ íèæíÿÿ ãðàíèöà!", vbCritical, "Îøèáêà"
        Exit Sub
    End If
    
    ubInput = InputBox("Ââåäèòå âåðõíþþ ãðàíèöó ? (ïî óìîë÷àíèþ 0,2):", "Êàëèáðîâêà ?", "0,2")
    s = Val(Replace(CStr(ubInput), ",", "."))
    If IsNumeric(s) Then
        ub = CDbl(s)
    Else
        MsgBox "Íåâåðíàÿ âåðõíÿÿ ãðàíèöà!", vbCritical, "Îøèáêà"
        Exit Sub
    End If
    
    ' 7) Âûáîð ìåñòà äëÿ âûâîäà ?
    Set rngOut = Application.InputBox( _
        prompt:="Âûáåðèòå âåðõíèé-ëåâûé óãîë äëÿ çàïèñè ? (ðàçìåð " & nRows & "?" & nCols & "):", _
        Title:="Êàëèáðîâêà ?", Type:=8)
    If rngOut Is Nothing Then Exit Sub
    If rngOut.Rows.Count < nRows Or rngOut.Columns.Count < nCols Then
        MsgBox "Âûáðàííûé äèàïàçîí ñëèøêîì ìàë!", vbCritical, "Îøèáêà"
        Exit Sub
    End If
    
    ' 8) Ðàñ÷¸ò ? ñ ó÷¸òîì ãðàíèö
    ReDim alphaArr(1 To nRows, 1 To nCols)
    Dim S_err As Double, S_denom As Double
    S_denom = (delta ^ 2) * nMatrices + lambda_reg
    
    For i = 1 To nRows
        For j = 1 To nCols
            S_err = 0#
            For k = 1 To nMatrices
                S_err = S_err + (matrices3D(k, i, j) - mainD(i, j))
            Next k
            alphaArr(i, j) = (delta * S_err) / S_denom
            ' Ïðèìåíÿåì ãðàíèöû
            If alphaArr(i, j) < lb Then alphaArr(i, j) = lb
            If alphaArr(i, j) > ub Then alphaArr(i, j) = ub
        Next j
    Next i
    
    ' 9) Çàïèñü ? â ëèñò
    rngOut.Resize(nRows, nCols).Value = alphaArr
    MsgBox "Êàëèáðîâêà çàâåðøåíà — ìàòðèöà ? çàïèñàíà.", vbInformation, "Ãîòîâî"
End Sub


