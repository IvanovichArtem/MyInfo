def predict_and_evaluate(df: pd.DataFrame, id_col, dt_col, col, migration_matrix, p=False, view=True):
    df = df.copy()
    df = df.sort_values([id_col, dt_col]).reset_index(drop=True)

    latest_gr = dict(zip(df[id_col], df[col]))
    predicted_values = []

    for index, row in df.iterrows():
        current_id = row[id_col]
        current_state = latest_gr.get(current_id, row[col])

        if p and current_state in migration_matrix.index:
            next_state = np.random.choice(
                migration_matrix.columns,
                p=migration_matrix.loc[current_state].values
            )
        elif current_state in migration_matrix.index:
            next_state = migration_matrix.loc[current_state].idxmax()
        else:
            next_state = current_state

        latest_gr[current_id] = next_state
        predicted_values.append(next_state)

    df[f'predicted_next_{col}'] = predicted_values

    # Смещение target на 1 строку вверх
    df["target"] = df[col].shift(-1)
    df["pred"] = df[f"predicted_next_{col}"]

    # Убираем последнюю строку, т.к. у неё нет фактического следующего значения
    result_df = df.iloc[:-1][[id_col, dt_col, col, "target", "pred"]].copy()

    # Accuracy и визуализация
    accuracy = accuracy_score(result_df["target"], result_df["pred"])
    if view:
        print(f"\nAccuracy score: {accuracy:.4f}")

        labels = sorted(df[col].dropna().unique())
        conf_mat = confusion_matrix(result_df["target"], result_df["pred"], labels=labels)
        conf_df = pd.DataFrame(conf_mat, index=labels, columns=labels)

        print("\nConfusion matrix:")
        plt.figure(figsize=(8, 6))
        sns.heatmap(conf_df, annot=True, fmt='d', cmap='Blues', linewidths=0.5)
        plt.xlabel("Предсказано")
        plt.ylabel("Фактическое")
        plt.title("Confusion Matrix")
        plt.show()

        print("\nClassification report:")
        print(classification_report(result_df["target"], result_df["pred"], labels=labels, zero_division=0))

    return result_df
